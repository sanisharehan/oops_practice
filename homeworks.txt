================
Homework#14:
===============
To check if a linked list is palindromic or not
m. isPalindrome(): Returns true if a linked list is palindromic

===============
Homework#13: 
==============
Write additional functions to reverse a linked list recursively and iteratively.
 k. reverseIter(): Function to reverse a linked list itertively
 l. reverseRec(): Function to reverse a linked list recursively

=============
Homework#12: 
==============
Implement LinkedList class which includes all the primitive LinkedList features
// as mentioned below:
// a. InsertFirst: Function to insert element at beginning of linkedlist.
// b. DeleteFirst: Function to delete element from beginning of linkedlist. 
// c. display: Display all elements in a linked list.
// d. search: Search for a given element in list with a given key.
// e. delete: Delete an element with a given key from list.
// f. getSize: Display size of linked list.
// g. insertEnd: Insert an element at end of linkedlist.
// h. insert(val, place): insert element at a given place from beginning in linked list.
// i. deleteEnd: Delete element from end of linked list.
// j. deleteIndex: Delete element at a given index from linked list.

=================
Homework#11:
=================
Implement Queue data structure using the linked list class created with binary
// trees. The time complexities are as mentioned with all the methods.
// The new class should have following functions:
// a. enqueue: O(n) since we need to traverse to the last element and add new. It can be changed to O(1)
// by having an additional pointer pointing to the last node.
// b. dequeue : O(1) since we are removing the root only.
// c. isEmpty: O(1) since we can simply check the root node exists or not.
// d. front: Return the element at first without deleting. O(1)
// e. end: Return the element at end without deleting. O(n) without end pointer
// f. size: O(n)


===================
Homework#10 (b):
===================
Implement a tree as a linked list. A linked list is similar to a tree except that 
// we only keep links in one direction. Hence, for every node in a tree, if we make either left/right link == NULL,
// this would become similar to a linked list.
// Include the following functions:
// a. insert(val v)
// b. deleteRoot()
// c. deleteLastNode()
// d. createNewRoot(val v)
// e. printVal()
// f. returnRoot()
// g. returnLastNode()
// h. getSize()
// 
// CHANGE: Add a new pointer to the last node in the tree in order to make insertion process as O(1)


===================
Homework#10 (a):
===================
Implement a tree as a linked list. A linked list is similar to a tree except that 
// we only keep links in one direction. Hence, for every node in a tree, if we make either left/right link == NULL,
// this would become similar to a linked list.
// Include the following functions:
// a. insert(val v)
// b. deleteRoot()
// c. deleteLastNode()
// d. createNewRoot(val v)
// e. printVal()
// f. returnRoot()
// g. returnLastNode()
// h. getSize()

============
Homework#6:
============
Are duplicate values allowed in a BST? How to handle/add duplicate values insertion in a BST.

==========
HOMEWORK-5
==========
Implement simple BST.

==========
HOMEWORK-4
==========
Difference between structs and classes in c++

==========
HOMEWORK-3
==========
//Recursion //LeetCode#77

Given two integers n and k, return all possible combinations of k numbers out of 1 ... n.

For example,
If n = 4 and k = 2, a solution is:
[
  [2,4],
  [3,4],
  [2,3],
  [1,2],
  [1,3],
  [1,4],
]

==========
HOMEWORK-2
==========
//Stack //LeetCode#20 

Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

The brackets must close in the correct order, "()" and "()[]{}" are all valid but "(]" and "([)]" are not.

==========
HOMEWORK-1
==========
//Stack

1) Create a class called StackOfIntegers, which has following public functions:

- void Push(int no)
- int Pop() // Returns -1 is stack is empty.
- int countOfElements()
- void DeleteAllElements()
- bool isEmpty()

If something is not clear, use your best judgement. I would be expecting three files:

1) StackOfIntegers.h
2) StackOfIntegers.cc
3) run_stack_of_integers_main.cc 
   // This file should have some test invocations of your class.
